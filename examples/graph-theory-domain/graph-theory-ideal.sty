-- Global system TODOs:
-- - Optional arguments for functions: `constains` might be implemented for two types with an additional argument, but we can use it without it
-- - BBox based containment: "a rectangle containing another" doesn't work precisely
-- - `onCanvas` is not quite precise: it only makes sure that the *center* of a shape is contained on canvas, not the whole thing. The cheapest and safest is to contain the bbox
-- - "repel by distance": clamp the repel function after some distance between bounding boxes (polygons) of two shapes


global {
    global.padding = 20.0
    global.nodePadding = 5.0
    global.edgeStroke = 2.0
    global.nodeSize = 5.0
    global.nodeColor = Colors.lightblue
    global.arrowColor = Colors.black
}

Colors {
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)
    Colors.darkgray = rgba(0.1, 0.1, 0.1, 1.0)
    Colors.gray = rgba(0.8, 0.8, 0.8, 1.0)
    Colors.red = rgba(1.0, 0.0, 0.0, 1.0)
    Colors.pink = rgba(1.0, 0.4, 0.7, 1.0)
    Colors.yellow = rgba(1.0, 1.0, 0.0, 1.0)
    Colors.orange = rgba(1.0, 0.6, 0.0, 1.0)
    Colors.lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.sky = rgba(0.325, 0.718, 0.769, 1.0)
    Colors.lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    Colors.lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    Colors.cyan = rgba(0.0, 1.0, 1.0, 1.0)
    Colors.purple = rgba(0.5, 0.0, 0.5, 1.0)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
    Colors.bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}

Node n {
  n.text = Text {
    x: n.shape.x
    y: n.shape.y
    string : n.label
    rotation : 0.0
    color : n.shape.color 
  }
  n.shape = Rectangle { 
    color : global.nodeColor
    strokeWidth : 1.0
    strokeColor : Colors.black
  }
  n.text above n.shape
  ensure contains(n.shape, n.text, 0.0)
  -- ensure center(n.text, n.shape)
  ensure onCanvas(n.text) 
  ensure onCanvas(n.shape)
}

Node x; Node y {
   -- Try to make sure no labels overlap
   -- encourage repel(x.shape, y.shape, 0.0001) 
   ensure disjoint(x.shape, y.shape, 0.0)
}

Node p; Node c
where to(p, c) 
{
  -- TODO: Weirdly shaped arrows to avoid things
  LOCAL.shape = Arrow {
    color : global.arrowColor
    thickness : global.edgeStroke
  }

  ensure onCanvas(LOCAL.shape)

  -- The arrow is "in between" the nodes, meaning that they should poke into them, but be as close as possible
  ensure between(LOCAL.shape, p.shape, c.shape, global.padding) 

  -- Locally encourage the nodes to be ordered from left to right
  -- TODO: what happens when there's a cycle? 
  encourage lessThan(p.shape.x, p.shape.x) 
}

-- GLOBAL: "stem" of the graph
-- GLOBAL: "flow" of the graph



