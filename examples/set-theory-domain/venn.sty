Set x {
    x.shape = Circle {
        strokeWidth : 0
    }

    x.shading = Image {
        centerX : x.shape.x
        centerY : x.shape.y
        lengthX : x.shape.r * 2.0
        lengthY : x.shape.r * 2.0
        path : "shading.svg"
    }

    -- x.shape.color = setOpacity(x.shape.color, 0.4)

    x.text = Text {
        string : x.label
        color: rgba(1.0, 1.0, 1.0, 1.0)
    }

    x.labelFn = ensure contains(x.shape, x.text)
    x.minSizeFn = ensure minSize(x.shape)
    x.maxSizeFn = ensure maxSize(x.shape)
    x.labelPosFn = encourage sameCenter(x.text, x.shape)
    LOCAL.layering  = x.shape below x.text
    LOCAL.shadeLayering  = x.shading below x.shape
}

-- Set x {
--     x.newPath = x.shape
--     x.testFn = encourage center(x.newPath)
-- }

Set x; Set y
where IsSubset(x, y) {
    LOCAL.containFn = ensure contains(y.shape, x.shape, 5.0)
    LOCAL.sizeFn    = ensure smallerThan(x.shape, y.shape)
    LOCAL.outsideFn = ensure outsideOf(y.text, x.shape)
    LOCAL.layering  = x.shape above y.shape
    LOCAL.layering1  = y.text below x.shape
    LOCAL.layering2  = x.shading above y.shape
}

Set x; Set y
where NotIntersecting(x, y) {
    LOCAL.notIntersectFn = ensure disjoint(x.shape, y.shape)
}

Set x; Set y
where Intersect(x, y) {
    LOCAL.overlapFn = ensure overlapping(x.shape, y.shape)
    LOCAL.labelFn1  = ensure outsideOf(y.text, x.shape)
    LOCAL.labelFn2  = ensure outsideOf(x.text, y.shape)
}

Point p {
    p.offset = 10.0
    p.shape = Circle {
        strokeWidth : 0
        color : rgba(0.0, 0.0, 0.0, 1.0)
        r : 3.0
    }

    p.text = Text {
        string : p.label
        x : p.shape.x + p.offset
        y : p.shape.y + p.offset
    }
}
