forall Set x {
    x.shape = Circle {
        x : ?
        y : ?
        r : ?
        -- r : 100.0
        strokeWidth : 0
    }

    x.text = Text {
        string : x.label
    }

    LOCAL.c = 20.0

    x.debugShape = Arrow {
        startX: x.text.x
        startY: x.text.y
        endX: x.text.x + LOCAL.c * derivative(x.text.x)
        endY: x.text.y + LOCAL.c * derivative(x.text.y)
        color: rgba(1.0, 0.0, 0.0, 0.5)
        arrowheadSize: 0.5
        thickness: 3.0
        style: "dashed"
    }

    LOCAL.d = 20.0

    x.debugShape2 = Arrow {
        startX: x.text.x
        startY: x.text.y
        endX: x.text.x + LOCAL.d * derivativePreconditioned(x.text.x)
        endY: x.text.y + LOCAL.d * derivativePreconditioned(x.text.y)
        color: rgba(0.0, 0.0, 1.0, 0.5)
        arrowheadSize: 0.5
        thickness: 3.0
        style: "dashed"
    }

    ensure contains(x.shape, x.text) -- NEW
    encourage sameCenter(x.text, x.shape) -- OLD

    ensure minSize(x.shape)
    ensure maxSize(x.shape)
}

forall Set x; Set y
where IsSubset(x, y) {
    ensure smallerThan(x.shape, y.shape)
    ensure outsideOf(y.text, x.shape)

    ensure contains(y.shape, x.shape, 5.0) -- NEW
    x.shape above y.shape
}
