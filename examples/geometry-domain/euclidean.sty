/* # TODO

- make the diagram the right size for the PDF

# OBJECTS TODO

- ray head is contained in box and is not fixed length
  - Add a rect-point constraint (or just use inRange?)
- rays don't overlap other rays (or segments)
- Maybe it would make more sense to sample in range of the box, rather than the canvas, and then optimize?? Can that be customizable in Style?

# LABELS TODO

- make `m` and `s` labels better (esp placing above segment)
- labels don't pairwise overlap
  - nothing overlaps the E^2 label (no other labels or primitives)
- sometimes the labels end up on TOP of the points due to the distance objective not being signed -- fix that
- account for label size in rect-label constraint (doesn't deal w/ non-square labels)

*/

Colors {
    -- Keenan palette
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)

    Colors.darkpurple = rgba(0.549,0.565,0.757, 1.0)
    Colors.purple2 = rgba(0.106, 0.122, 0.54, 0.2)
    Colors.lightpurple = rgba(0.816,0.824, 0.902, 1.0)

    Colors.verylightpurple = rgba(0.953, 0.957, 0.977, 1.0)
    Colors.purple3 = rgba(0.557, 0.627, 0.769, 1.0)

    Colors.midnightblue = rgba(0.14, 0.16, 0.52, 1.0)
    Colors.lightslategray = rgba(0.50, 0.51, 0.69, 1.0)
    Colors.silver = rgba(0.71, 0.72, 0.79, 1.0)
    Colors.gainsboro = rgba(0.87, 0.87, 0.87, 1.0)

    Colors.darkgray = rgba(0.1, 0.1, 0.1, 1.0)
    Colors.gray = rgba(0.8, 0.8, 0.8, 1.0)
    Colors.red = rgba(1.0, 0.0, 0.0, 1.0)
    Colors.pink = rgba(1.0, 0.4, 0.7, 1.0)
    Colors.yellow = rgba(1.0, 1.0, 0.0, 1.0)
    Colors.orange = rgba(1.0, 0.6, 0.0, 1.0)
    Colors.lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.sky = rgba(0.325, 0.718, 0.769, 1.0)
    Colors.lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    Colors.lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    Colors.cyan = rgba(0.0, 1.0, 1.0, 1.0)
    Colors.purple = rgba(0.5, 0.0, 0.5, 1.0)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
    Colors.bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}

G {
    G.pi = 3.14159
    G.arrowheadSize = 0.65
    G.strokeWidth = 1.75
    G.textPadding = 7.0
    G.textPadding2 = 25.0
    G.repelWeight = 0.7
    G.repelWeight2 = 0.5
    G.fontSize = "18pt"
    G.containPadding = 40.0
    G.rayLength = 70.0

    G.label = "E^2"
    G.text = Text {
	x : (G.dim / 2.0) - G.textPadding2
	y : (G.dim / 2.0) - G.textPadding2
	string : G.label
	fontSize : G.fontSize
    }

    G.dim = 250.0

    -- inner: #f3f4f9, outer: #8e93c4
    G.plane = Rectangle {
    	    angle : 0.0
	    color : Colors.verylightpurple
	    strokeColor : Colors.purple3
	    strokeWidth : 2.0
	    x : 0.0
	    y : 0.0
	    sizeX : G.dim
	    sizeY : G.dim
    }

   G.textLayering = G.text above G.plane
}

Point p {
      p.x = ?
      p.y = ?
      p.vec = [p.x, p.y]

       p.shape = Circle {
         x : get(p.vec, 0)
	 y : get(p.vec, 1)
         r : 3.0
	 color : Colors.black
	 strokeWidth : 1.0
	 strokeColor : Colors.black
       }

       p.text = Text {
         x : ?
	 y : ?
	 string : p.label
	 rotation : 0.0
	 color : Colors.black
	 fontSize : G.fontSize
       }

       p.labelFnMargin = ensure atDist(p.shape, p.text, G.textPadding)
       -- TODO: the problem is that this ensures the padding is const? Or is > padding okay?
       -- There's a choice of whether to put padding on the point or the text for containment
       p.posFn = ensure contains(G.plane, p.shape, G.containPadding)
       p.labelFn = ensure contains(G.plane, p.text, 0.0)

       p.layering1 = p.shape above G.plane
       p.layering2 = p.text above G.plane
}

Segment e
where e := MkSegment(p, q)
with Point p; Point q {
     e.vec = [q.x - p.x, q.y - p.y]

     e.shape = Line {
     	     startX : p.shape.x
     	     startY : p.shape.y
     	     endX : q.shape.x
     	     endY : q.shape.y
	     color : Colors.black
	     thickness : G.strokeWidth
     }

     e.layering1 = p.shape above e.shape
     e.layering2 = q.shape above e.shape

     LOCAL.labelAvoidFn_p = encourage repel(e.shape, p.text, G.repelWeight)
     LOCAL.labelAvoidFn_q = encourage repel(e.shape, q.text, G.repelWeight)

     -- e.norm = 200.0

     -- TODO: ensure norm > 10.0
     -- e.normFn = ensure hasNorm(e.vec, 200.0)

     e.layering = e.shape above G.plane
}

Triangle t
where t := MkTriangleP(p, q, r)
with Point p; Point q; Point r {
     t.color = setOpacity(Colors.darkpurple, 0.4)

     -- TODO: layer all labels on top of filled shapes
     t.shape = Curve {
     	     pathData : triangle(p.shape.x, p.shape.y, q.shape.x, q.shape.y, r.shape.x, r.shape.y)
	     strokeWidth : 0.0
	     fill : t.color
	     color : Colors.black
	     rotation : 0.0
     }

     t.layering = t.shape above G.plane
}

Angle theta
where theta := InteriorAngle(q, p, r)
with Point p; Point q; Point r {

     theta.radius = 40.0
     -- TODO: always take the acute angle, not the obtuse angle
     theta.arcPath = arcPathEuclidean(p.vec, q.vec, r.vec, theta.radius)

     theta.shape = Curve {
     		 pathData : polygonFromPoints(theta.arcPath)
		 strokeWidth : G.strokeWidth
		 color : Colors.darkpurple
		 fill : setOpacity(Colors.white, 0.5)
     }

     theta.layering1 = theta.shape above G.plane
     theta.layering2 = theta.shape below p.shape
     theta.layering3 = theta.shape below q.shape
     theta.layering4 = theta.shape below r.shape

     -- TODO: or could be minimum constraint function
     theta.sizeFn = encourage repel(q.shape, r.shape, 100.0)
}

Ray r {
    r.length = G.rayLength
}

Point p
where p := Midpoint(s)
with Segment s {
     override p.shape.x = midpointX(s.shape)
     override p.shape.y = midpointY(s.shape)

     override p.shape.color = Colors.white
     override p.shape.r = 3.2
     p.midLayering = p.shape above s.shape
}

Ray r
with Angle theta; Point x; Point y; Point z
where r := Bisector(theta); theta := InteriorAngle(y, x, z) {

      r.tail = [x.x, x.y]
      r.head = angleBisectorEuclidean(x.vec, y.vec, z.vec, r.length)

      r.shape = Line {
      	      startX : x.x
	      startY : x.y
	      -- TODO: figure out how long this should be
	      -- TODO: calculate this location properly; WRT the angle and the non-origin endpoints; this is just a heuristic
	      endX : get(r.head, 0)
	      endY : get(r.head, 1)
	      thickness : G.strokeWidth
	      color : Colors.darkpurple
      	      rightArrowhead : True
	      arrowheadSize : G.arrowheadSize
      }

      -- Bisect the arc twice more to get the bisector mark locations
      -- Throw away z coordinate for each
      theta.bisectpt1 = angleBisectorEuclidean(x.vec, y.vec, r.head, theta.radius)
      theta.bisectpt2 = angleBisectorEuclidean(x.vec, z.vec, r.head, theta.radius)
      theta.markLen = 10.0

      -- Angle bisector marks: two tick marks
      theta.bisectMark1 = Curve {
      	      pathData : makeBisectorMark(theta.bisectpt1, x.vec, theta.markLen)
      	      strokeWidth : G.strokeWidth
      	      fill : Colors.none
      	      color : Colors.darkpurple
      	      rotation : 0.0
      	      rightArrowhead : False
      	      arrowheadSize : 0.0
      }

      theta.bisectMark2 = Curve {
      	      pathData : makeBisectorMark(theta.bisectpt2, x.vec, theta.markLen)
      	      strokeWidth : G.strokeWidth
      	      fill : Colors.none
      	      color : Colors.darkpurple
      	      rotation : 0.0
      	      rightArrowhead : False
      	      arrowheadSize : 0.0
      }

      theta.layeringMark1 = theta.bisectMark1 above theta.shape
      theta.layeringMark2 = theta.bisectMark2 above theta.shape
      r.layering = r.shape above G.plane
}

Ray r
with Linelike s; Point m
where r := PerpendicularBisector(s); m := Midpoint(s) {

      r.shape = Line {
      	      startX : midpointX(s.shape)
	      startY : midpointY(s.shape)
	      endX : perpX(s.shape, r.shape.startX, r.shape.startY, r.length)
	      endY : perpY(s.shape, r.shape.startX, r.shape.startY, r.length)
	      thickness : G.strokeWidth
	      color : Colors.darkpurple
	      style : "dotted"
      	      rightArrowhead : True
	      arrowheadSize : G.arrowheadSize
      }

      r.perpSize = 10.0

      r.perpMark = Curve {
      		 pathData : perpPath(r.shape, s.shape, (r.shape.startX, r.shape.startY), r.perpSize)
		 strokeWidth : 1.25
		 color : Colors.black
		 fill : setOpacity(Colors.white, 0.5)
      }

      r.layering1 = r.shape above G.plane
      r.layering2 = r.perpMark above G.plane

      r.markLayering1 = r.perpMark below s.shape
      r.markLayering2 = r.perpMark below r.shape
      -- r.markLayering3 = r.perpMark above G.sphere
      r.markLayering4 = r.perpMark below p.shape
      r.markLayering5 = r.perpMark below q.shape
      r.markLayering6 = r.perpMark below r.shape
      r.markLayering7 = r.perpMark below m.shape

     LOCAL.labelAvoidFn_Mark = encourage repel(r.shape, m.text, G.repelWeight)
     LOCAL.labelAvoidFn_Ray = encourage repel(r.perpMark, m.text, G.repelWeight)
     LOCAL.labelAvoidFn_Seg = encourage repel(s.shape, m.text, G.repelWeight)
}

-- TODO: trying to just add a repel function on the point that's not in a segment... this might be too many repels for the ones that are in a segment though

-- TODO: should we use G.repelWeight below?

Ray r; Point p {
    LOCAL.labelAvoidFn = encourage repel(r.shape, p.text, G.repelWeight)
    LOCAL.layering = r.shape below p.shape
}

Segment s; Point p {
     LOCAL.labelAvoidFn_p = encourage repel(s.shape, p.text, G.repelWeight)
}

Triangle t; Point p {
    LOCAL.layering = t.shape below p.shape
}

Triangle t; Angle theta {
	 LOCAL.layering = theta.shape above t.shape
}
