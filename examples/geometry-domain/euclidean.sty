-- TODO: delete this
global {
    global.padding = 20.0
    global.stroke = 2.0
    global.spacing = 150.0
    global.scaleFactor = 100.0
}

Colors {
    -- Keenan palette
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)

    Colors.darkpurple = rgba(0.549,0.565,0.757, 1.0)
    Colors.purple2 = rgba(0.106, 0.122, 0.54, 0.2)
    Colors.lightpurple = rgba(0.816,0.824, 0.902, 1.0)

    Colors.midnightblue = rgba(0.14, 0.16, 0.52, 1.0)
    Colors.lightslategray = rgba(0.50, 0.51, 0.69, 1.0)
    Colors.silver = rgba(0.71, 0.72, 0.79, 1.0)
    Colors.gainsboro = rgba(0.87, 0.87, 0.87, 1.0)

    Colors.darkgray = rgba(0.1, 0.1, 0.1, 1.0)
    Colors.gray = rgba(0.8, 0.8, 0.8, 1.0)
    Colors.red = rgba(1.0, 0.0, 0.0, 1.0)
    Colors.pink = rgba(1.0, 0.4, 0.7, 1.0)
    Colors.yellow = rgba(1.0, 1.0, 0.0, 1.0)
    Colors.orange = rgba(1.0, 0.6, 0.0, 1.0)
    Colors.lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.sky = rgba(0.325, 0.718, 0.769, 1.0)
    Colors.lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    Colors.lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    Colors.cyan = rgba(0.0, 1.0, 1.0, 1.0)
    Colors.purple = rgba(0.5, 0.0, 0.5, 1.0)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
    Colors.bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}

G {
    G.arrowheadSize = 0.65
    G.strokeWidth = 1.75
    G.textPadding = 7.0
    G.textScale = 1.75 -- TODO
}

Point p {
       p.shape = Circle {
         x : ?
	 y : ?
         r : 3.0
	 color : Colors.black
	 strokeWidth : 1.0
	 strokeColor : Colors.black
       }

       p.text = Text {
	 -- x : p.shape.x + global.padding
	 -- y : p.shape.y + global.padding
         x : ?
	 y : ?
	 string : p.label
	 rotation : 0.0
	 color : p.shape.color
	 scale : G.textScale
       }

       p.labelFnMargin = ensure atDist(p.shape, p.text, G.textPadding)
       -- p.posFn = ensure onCanvas(p.shape)
}

Segment e
where e := MkSegment(p, q)
with Point p; Point q {
     e.shape = Line {
     	     startX : p.shape.x
     	     startY : p.shape.y
     	     endX : q.shape.x
     	     endY : q.shape.y
	     color : Colors.black
	     thickness : G.strokeWidth
     }

     -- e.text = Text {
     --   x = midpointX(e.shape) + global.padding
     --   y = midpointY(e.shape) + global.padding
     --   string = e.label
     --   rotation = 0.0
     -- }

     e.layering1 = p.shape above e.shape
     e.layering2 = q.shape above e.shape
}


Triangle t
where t := MkTriangleP(p, q, r)
with Point p; Point q; Point r {
     t.color = setOpacity(Colors.silver, 0.5)

     -- TODO: layer all labels on top of filled shapes
     t.shape = Curve {
     	     pathData : triangle(p.shape.x, p.shape.y, q.shape.x, q.shape.y, r.shape.x, r.shape.y)
	     strokeWidth : 0.0
	     fill : t.color
	     color : Colors.black
	     rotation : 0.0
     }

     -- t.text = Text {
     --   string = f.label
     --   color = f.color
     --   rotation = 0.0
     -- }
}

Angle theta
where theta := AngleBetween(q, p, r)
with Point p; Point q; Point r {

     theta.originX = p.shape.x
     theta.originY = p.shape.y

     -- Right now, angle between segments that share an endpoint
     -- TODO generalize this, also use pt2
     theta.shape = Arc {
     	   x : theta.originX
     	   y : theta.originY
     	   r : 40.0 -- TODO: set this based on the relative lengths of the segment
     	   startAngle : angleOf(a.shape, theta.originX, theta.originY) -- Degrees
	   endAngle : angleOf(b.shape, theta.originX, theta.originY)
	   strokeWidth : G.strokeWidth
     	   strokeColor : Colors.darkpurple
	   fillColor : setOpacity(Colors.white, 0.5)
	   -- TODO: make a "pie wedge" fill with a path
     }
}

Ray r {
    r.length = 100.0
}

Ray r
with Angle theta; Point x; Point y; Point z
where r := Bisector(theta); theta := AngleBetween(y, x, z) {

      r.shape = Line {
      	      startX : theta.originX
	      startY : theta.originY
	      -- TODO: figure out how long this should be
	      -- TODO: calculate this location properly; WRT the angle and the non-origin endpoints; this is just a heuristic
	      endX : average(y.shape.x, z.shape.x)
	      endY : average(y.shape.y, z.shape.y)
	      thickness : G.strokeWidth
	      color : Colors.darkpurple
      	      rightArrowhead : True
	      arrowheadSize : G.arrowheadSize
      }

      -- TODO: layer above the triangle
}

Ray r
with Linelike s
where r := PerpendicularBisector(s) {

      r.shape = Line {
      	      startX : midpointX(s.shape)
	      startY : midpointY(s.shape)
	      endX : perpX(s.shape, r.shape.startX, r.shape.startY, r.length)
	      endY : perpY(s.shape, r.shape.startX, r.shape.startY, r.length)
	      thickness : G.strokeWidth
	      color : Colors.darkpurple
	      style : "dotted"
      	      rightArrowhead : True
	      arrowheadSize : G.arrowheadSize
      }

      r.perpSize = 10.0

      r.perpMark = Curve {
      		 pathData : perpPath(r.shape, s.shape, (r.shape.startX, r.shape.startY), r.perpSize)
		 strokeWidth : 1.25
		 color : Colors.black
		 fill : setOpacity(Colors.white, 0.5)
      }

      r.markLayering1 = r.perpMark below s.shape
      r.markLayering2 = r.perpMark below r.shape
      -- r.markLayering3 = r.perpMark above G.sphere
      r.markLayering4 = r.perpMark below p.shape
      r.markLayering5 = r.perpMark below q.shape
      r.markLayering6 = r.perpMark below r.shape
      r.markLayering7 = r.perpMark below m.shape
}

-- Midpoint
Point p
where p := Midpoint(s)
with Segment s {
     override p.shape.x = midpointX(s.shape)
     override p.shape.y = midpointY(s.shape)
}

-- TODO: what order should the selectors be in?

Ray r; Point p {
    LOCAL.layering = r.shape below p.shape
}

Triangle t; Point p {
    LOCAL.layering = t.shape below p.shape
}