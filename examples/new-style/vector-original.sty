-- ORIGINAL

-- Global constants and sizes
const {
  const.vectorSpaceSize = 350.0
  const.axisSize = const.vectorSpaceSize * 0.5
  const.scaleRatio = 200.0
  const.perpLen = 25.0
  const.repelWeight = 0.7
  const.arrowheadSize = 0.6
  -- For unit mark
  const.markerPadding = 15.0
  const.barSize = 5.0
}

-- Global RGB colors in common use
Colors {
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.lightGray = ...
    Colors.mediumBlue = ...
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
}

forall VectorSpace U {               -- LinearAlgebra.sty
   U.originX = ? -- to be determined via optimization
   U.originY = ? -- to be determined via optimization
   U.origin = (U.originX, U.originY)
   U.xAxis = Arrow { -- draw an arrow along the x-axis
          startX : U.originX - 1 
          startY : U.originY
          endX   : U.originX + 1
          endY   : U.originY 
      thickness   : 1.5 
          style   : "solid"
          color   : Colors.lightGray 
   } -- (similar declarations omitted for the y-axis)
}
forall Vector u, VectorSpace U -- match any vector
where In(u, U) {             -- in some vector space
   u.arrow = Arrow { 
      startX : U.originX 
      startY : U.originY
        endX : ? 
        endY : ?
      color : Colors.mediumBlue
   } 
   u.text = Text {
        string : u.label -- label from Substance code
         color : u.arrow.color  -- use arrow's color
             x : ? 
             y : ?
   }
   u.start = (u.arrow.startX, u.arrow.startY)
   u.end = (u.arrow.endX, u.arrow.endY)
   u.vector = minus(u.arrow.end, u.arrow.start) 
   encourage near(u.text, u.end) 
   ensure contained(u.end, U.shape)
}
forall Vector u, Vector v 
where Orthogonal(u, v) { 
   local.perpMark = Curve { 
        pathData : orientedSquare(u.shape, v.shape, 
                                  U.origin, const.perpLen)
        strokeWidth : 2.0
        color : Colors.black
        fill : Colors.white
   } 
     ensure equals(dot(u.vector, v.vector), 0.0) 
}
... -- (similar rule omitted for Unit)
Vector `x2`  {
   override `x2`.shape.color = Colors.green; 
}
