VectorSpace u {
    
    shape = Box {

     }
   
       xPos = Arrow {
          start = midSquare(u.shape)
          end = toRightSquare(u.shape)
          text = "x"
    }

    xNeg = Arrow {
          start = midSquare(u.shape)
          end = toLeftSquare(u.shape)
          text = None
    }

    yPos = Arrow {
          start = midSquare(u.shape)
          end = toAboveSquare(u.shape)
          text = "y"
    }

    yNeg = Arrow {
          start = midSquare(u.shape)
          end = toBelowSquare(u.shape)
          text = None
    }

    objective nearHead(u.xPos, u.xPos.label, 0, 20)
    objective nearHead(u.yPos, u.yPos.label, 0, 20)

    constraint contains(u.shape,u.shape.label)
    constraint contains(u.shape,u.xPos)
    constraint contains(u.shape,u.xNeg)
    constraint contains(u.shape,u.yPos)
    constraint contains(u.shape,u.yNeg)
}

VectorSpace u, VectorSpace v{
    constraint nonOverlapping(u.shape,v.shape)
    objective sameHeight(u.shape, v.shape)
}

LinearMap f x y {
    shape = Arrow {
        start = rightSquare(x.shape)
        end   = leftSquare(y.shape)
        style = "curved"
        text = Auto
    }

    objective centerLabel(f, f.shape.label)
}

Vector v vecSpace {    
    shape = Arrow {
        start =  midSquare(vecSpace.shape)
    }
    
    objective nearHead(v.shape, v.shape.label, 0, 20)
    constraint contains(vecSpace.shape,v.shape)

}