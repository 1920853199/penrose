types = [(TCon, "Vector", ValOfType [Ktype (TypeConst "VectorSpace")], Output TypeConst "type"),(TCon, "Scalar", ValOfType [], Output TypeConst "type"),(TCon, "Map", ValOfType [Ktype (TypeConst "type"),Ktype (TypeConst "type")], Output TypeConst "type"),(TCon, "VectorSpace", ValOfType [], Output TypeConst "type")]
 
operations = [(Op, "AddV", forvars [VarConst "V"]:[TTypeVar (TypeVarConst "VectorSpace")], fortypes []:[], inputT [TConstr "Vector"([AT (TTypeVar (TypeVarConst "V"))]),TConstr "Vector"([AT (TTypeVar (TypeVarConst "V"))])], outputT TConstr "Vector"([AT (TTypeVar (TypeVarConst "V"))])),(Op, "AddS", forvars []:[], fortypes []:[], inputT [TTypeVar (TypeVarConst "Scalar"),TTypeVar (TypeVarConst "Scalar")], outputT TTypeVar (TypeVarConst "Scalar")),(Op, "Norm", forvars [VarConst "V"]:[TTypeVar (TypeVarConst "VectorSpace")], fortypes []:[], inputT [TConstr "Vector"([AT (TTypeVar (TypeVarConst "V"))])], outputT TTypeVar (TypeVarConst "Scalar")),(Op, "InnerProd", forvars [VarConst "V"]:[TTypeVar (TypeVarConst "VectorSpace")], fortypes []:[], inputT [TConstr "Vector"([AT (TTypeVar (TypeVarConst "V"))]),TConstr "Vector"([AT (TTypeVar (TypeVarConst "V"))])], outputT TTypeVar (TypeVarConst "Scalar")),(Op, "Apply", forvars []:[], fortypes [TypeVarConst "A",TypeVarConst "B"]:[TypeConst "type",TypeConst "type"], inputT [TConstr "Map"([AT (TTypeVar (TypeVarConst "A")),AT (TTypeVar (TypeVarConst "B"))]),TTypeVar (TypeVarConst "A")], outputT TTypeVar (TypeVarConst "B"))]
 
predicates = [(Pd, "LinearV", forvars [VarConst "U",VarConst "V"]:[TTypeVar (TypeVarConst "VectorSpace")], fortypes []:[], inputT [TConstr "Map"([AT (TConstr "Vector"([AT (TTypeVar (TypeVarConst "U"))])),AT (TConstr "Vector"([AT (TTypeVar (TypeVarConst "V"))]))])] , [], outputT PropConst "Prop"),(Pd, "LinearS", forvars []:[], fortypes []:[], inputT [TConstr "Map"([AT (TTypeVar (TypeVarConst "Scalar")),AT (TTypeVar (TypeVarConst "Scalar"))])] , [], outputT PropConst "Prop"),(Pd, "Not", forvars []:[], fortypes []:[], inputT [] , [PropConst "Prop"], outputT PropConst "Prop"),(Pd, "And", forvars []:[], fortypes []:[], inputT [] , [PropConst "Prop",PropConst "Prop"], outputT PropConst "Prop")]
 
