constructor Vector : [VectorSpace] -> type                    
constructor Scalar : type                                               
constructor Map : [type, type] -> type
constructor VectorSpace : type                                      

operator AddV : forvars [V] : [VectorSpace], [Vector(V), Vector(V)] -> Vector(V)
operator AddS : [Scalar, Scalar] -> Scalar
operator Norm : forvars [V] : [VectorSpace], [Vector(V)] -> Scalar
operator InnerProd : forvars [V] : [VectorSpace], [Vector(V), Vector(V)] -> Scalar
operator Apply : fortypes [A,B] : [type,type], [Map(A, B), A] -> B

predicate LinearV : forvars [U,V] : [VectorSpace], [Map(Vector(U), Vector(V))] -> Prop
predicate LinearS : [Map(Scalar, Scalar)] -> Prop
predicate Not : [Prop] -> Prop
predicate And : [Prop, Prop] -> Prop
