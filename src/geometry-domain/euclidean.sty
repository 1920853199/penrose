global {
    global.padding = 20.0
    global.stroke = 2.0
    global.spacing = 150.0
    global.scaleFactor = 100.0
}

Colors {
    -- Keenan palette
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)
    Colors.midnightblue = rgba(0.14, 0.16, 0.52, 1.0)
    Colors.lightslategray = rgba(0.50, 0.51, 0.69, 1.0)
    Colors.silver = rgba(0.71, 0.72, 0.79, 1.0)
    Colors.gainsboro = rgba(0.87, 0.87, 0.87, 1.0)

    Colors.darkgray = rgba(0.1, 0.1, 0.1, 1.0)
    Colors.gray = rgba(0.8, 0.8, 0.8, 1.0)
    Colors.red = rgba(1.0, 0.0, 0.0, 1.0)
    Colors.pink = rgba(1.0, 0.4, 0.7, 1.0)
    Colors.yellow = rgba(1.0, 1.0, 0.0, 1.0)
    Colors.orange = rgba(1.0, 0.6, 0.0, 1.0)
    Colors.lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.sky = rgba(0.325, 0.718, 0.769, 1.0)
    Colors.lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    Colors.lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    Colors.cyan = rgba(0.0, 1.0, 1.0, 1.0)
    Colors.purple = rgba(0.5, 0.0, 0.5, 1.0)
    Colors.lightpurple = rgba(0.5, 0.0, 0.5, 0.25)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
    Colors.bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}

Point p {
       p.shape = Circle { 
         x = OPTIMIZED
	 y = OPTIMIZED
         r = 3.0
	 color = Colors.black
	 strokeWidth = 0.0
       }

       p.text = Text {
	 x = p.shape.x + global.padding
	 y = p.shape.y + global.padding
	 string = p.label
	 rotation = 0.0
	 color = p.shape.color
       }

       -- p.posFn = ensure onCanvas(p.shape)
}

Segment e
where e := MkSegment(p, q)
with Point p; Point q {
     e.shape = Line { 
     	     startX = p.shape.x
     	     startY = p.shape.y
     	     endX = q.shape.x
     	     endY = q.shape.y
	     color = Colors.midnightblue
	     thickness = global.stroke
     }

     -- e.text = Text {
     --   x = midpointX(e.shape) + global.padding
     --   y = midpointY(e.shape) + global.padding
     --   string = e.label
     --   rotation = 0.0
     -- }

     e.layering1 = p.shape above e.shape
     e.layering2 = q.shape above e.shape
}


Triangle t
where t := MkTriangleP(p, q, r)
with Point p; Point q; Point r {
     f.color = setOpacity(Colors.silver, 0.5)

     -- TODO: layer all labels on top of filled shapes
     f.shape = Curve { 
     	     pathData = triangle(p.shape.x, p.shape.y, q.shape.x, q.shape.y, r.shape.x, r.shape.y)
	     strokeWidth = 1.0
	     fill = f.color
	     color = Colors.black
	     rotation = 0.0
     }

     -- f.text = Text {
     --   string = f.label
     --   color = f.color
     --   rotation = 0.0
     -- }
}

Angle theta
where theta := AngleBetween(a, b)
with Linelike a; Linelike b {
     -- theta.test = Circle {
     --     x = 0.0
     -- 	 y = 0.0
     -- 	 r = 5.0
     -- 	 color = setOpacity(Colors.red, 0.5)
     -- 	 strokeWidth = 0.0
     -- }

     -- Right now, angle between intersecting segments
     theta.shape = Arc {
     	   x = 100.0
     	   y = -100.0
     	   r = 50.0
     	   startAngle = 45.0 -- Degrees
	   endAngle = 135.0
     	   isRight = False
	   strokeWidth = 3.0
     	   strokeColor = Colors.black
	   fillColor = Colors.none -- setOpacity(Colors.silver, 0.5)
	   -- TODO: make a "pie wedge" fill with a path
     }
}

Ray r
with Angle theta; Linelike a; Linelike b
where r := Bisector(theta); theta := AngleBetween(a, b) {

          
}

-- Midpoint
Point p
where p := Midpoint(s)
with Segment s {
     override p.shape.x = midpointX(s.shape)
     override p.shape.y = midpointY(s.shape)
}

-- TODO: what order should the selectors be in?
