Colors {
    -- Keenan palette
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)
    Colors.midnightblue = rgba(0.14, 0.16, 0.52, 1.0)
    Colors.lightslategray = rgba(0.50, 0.51, 0.69, 1.0)
    Colors.silver = rgba(0.71, 0.72, 0.79, 1.0)
    Colors.gainsboro = rgba(0.87, 0.87, 0.87, 1.0)

    -- Colors.darkgray = rgba(0.1, 0.1, 0.1, 1.0)
    -- Colors.gray = rgba(0.8, 0.8, 0.8, 1.0)
    Colors.red = rgba(1.0, 0.0, 0.0, 1.0)
    Colors.pink = rgba(1.0, 0.4, 0.7, 1.0)
    Colors.yellow = rgba(1.0, 1.0, 0.0, 1.0)
    Colors.orange = rgba(1.0, 0.6, 0.0, 1.0)
    -- Colors.lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.sky = rgba(0.325, 0.718, 0.769, 1.0)
    -- Colors.lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    -- Colors.lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    -- Colors.cyan = rgba(0.0, 1.0, 1.0, 1.0)
    -- Colors.purple = rgba(0.5, 0.0, 0.5, 1.0)
    -- Colors.lightpurple = rgba(0.5, 0.0, 0.5, 0.25)
    -- Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
    -- Colors.bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}

G {
    G.padding = 20.0
    G.stroke = 2.0
    G.spacing = 150.0
    G.scaleFactor = 100.0
    G.pi = 3.14159
    G.two_pi = 6.28319
    G.sqrt_2_2 = 1.414/2.0

    G.sphereRadius = 1.0
    G.dist_to_sphere = 2.0
    G.dist_to_sphere_center = G.dist_to_sphere + G.sphereRadius
    G.camera_z = G.dist_to_sphere + G.sphereRadius
    G.camera = [0.0, 0.0, -1.0 * G.camera_z]     -- x, y, z in math space 
    		  -- Note: Sphere has r=0.5, so the camera needs to be at sufficient distance from the sphere to be able to project on the near plane z=1
    G.dir = [0.0, 0.0, 1.0] -- looking down the +z-axis
    G.hfov = (-5.0, 5.0)
    G.vfov = (-5.0, 5.0)

    G.toScreen = 500.0

    G.test = Circle {
    		x : 0.0
		y : 0.0
		r : (G.sphereRadius * G.toScreen / G.dist_to_sphere_center) 
		-- TODO: I think this is halved because the projective plane is at z=1 and the widest part of the sphere is at z=3
		color : setOpacity(Colors.blue, 0.2)
		strokeWidth : 1.0
		strokeColor : Colors.black
    }

    G.dof = ?
}

Point p {
      -- Point on sphere
      p.x = ?
      p.y = ?
      p.z = ?
      p.vec_math = [p.x, p.y, p.z]
      p.onSphereFn = ensure hasNorm(p.vec_math, G.sphereRadius) -- 0.5

      -- x_screen, y_screen, z_projected (not converted to screen)
      p.vec_screen = projectAndToScreen(G.hfov, G.vfov, G.sphereRadius, G.camera, G.dir, p.vec_math, G.toScreen)

      p.z_sphere_range = (-1.0 * G.sphereRadius + G.camera_z, G.sphereRadius + G.camera_z) -- Closer to camera, farther from camera
      p.z_screen_range = (15.0, 3.0) -- reverse lerp because it should be bigger if closer to camera

      -- TODO: open parser issue: no inline exprs here?
       p.shape = Circle {
         x : get(p.vec_screen, 0)
	 y : get(p.vec_screen, 1)
	       -- z in [-0.5,0.5] -> [1.5, 2.5] -> [3, 10]. 
	       -- TODO check/update this. This only works if z would lie on the sphere in math space
         r : max(scaleLinear(get(p.vec_screen, 2), p.z_sphere_range, p.z_screen_range), 0.0)
	 color : setOpacity(Colors.red, 0.4)
	 strokeWidth : 1.0
	 strokeColor : Colors.black
       }

       p.text = Text {
	 x : p.shape.x + G.padding
	 y : p.shape.y + G.padding
	 string : p.label
	 rotation : 0.0
	 color : p.shape.color
       }
}

-- Works fine for pts with z=0
-- Although the sphere size still seems to be wrong.... Or maybe the points are rendered wrong?
Point `p` {
      -- override `p`.vec_math = [1.0, 0.0, 0.0]
      -- override `p`.vec_math = [G.sqrt_2_2, G.sqrt_2_2, 0.0]
      -- override `p`.vec_math = [0.0, 0.0, -1.0] -- Closest to camera
      override `p`.vec_math = [0.0, 0.0, 1.0] -- Farthest from camera
}

Point `q` {
      override `q`.vec_math = [-G.sqrt_2_2, -G.sqrt_2_2, 0.0]
}

-- Point `p`; Point `q`; Point `r` {
      -- TODO: this should use distance on the sphere in cartesian coords
      -- LOCAL.repel_pq = encourage repel(`p`.sphereCoords0, `q`.sphereCoords0)
      -- LOCAL.repel_qr = encourage repel(`q`.sphereCoords0, `r`.sphereCoords0)
      -- LOCAL.repel_pq = encourage repel(`p`.sphereCoords0, `r`.sphereCoords0)
-- }

Segment e
where e := MkSegment(p, q)
with Point p; Point q {
     -- Line on sphere. (Arc of a circle, or a geodesic)
     -- Interpolate between each one's sphere coords to yield several points
     -- then project all of them into screen space

     e.numPts = 5
     e.arcPath = slerp(p.vec_math, q.vec_math, e.numPts)
     e.screenspacePath = projectAndToScreen_list(G.hfov, G.vfov, G.sphereRadius, G.camera, G.dir, e.arcPath, G.toScreen)

     -- Draw a path using the slerp'ed points
     e.shape = Curve {
     	     pathData : pathFromPoints(e.screenspacePath)
	     strokeWidth : 2.0
	     fill : Colors.none
	     color : Colors.midnightblue
	     rotation : 0.0
     }

     e.layering1 = p.shape above e.shape
     e.layering2 = q.shape above e.shape
}
