-- Global constants and sizes
const {
  const.vectorSpaceSize = 400.0
  const.axisSize = const.vectorSpaceSize * 0.4
  const.scaleRatio = 200.0
}

-- Global RGB colors in common use
Colors {
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.lightBlue = rgba(0.1, 0.1, 0.9, 0.1)
    Colors.darkBlue = rgba(0.05, 0.05, 0.6, 0.5)
    Colors.darkGray = rgba(0.4, 0.4, 0.4, 1.0)
    Colors.gray = rgba(0.6, 0.6, 0.6, 1.0)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
}

VectorSpace U {
    U.thickness = 2.0
    U.axisColor = Colors.gray

    -- TODO: get rid of this?
    U.shape = Square {
        side : const.vectorSpaceSize
        color : Colors.none
	-- stroke : Colors.black
    }

    -- U.textX = Text {
    --     string : "x"
    --     color : Colors.darkGray
    -- }

    -- U.textY = Text {
    --     string : "y"
    --     color : Colors.darkGray
    -- }

    -- TODO: double-headed arrows
    U.xAxisRight = Arrow {
        startX : U.shape.x
        startY : U.shape.y
        endX : U.shape.x + const.axisSize
        endY : U.shape.y
        thickness : U.thickness
        color : U.axisColor
    }

    U.xAxisLeft = Arrow {
        startX : U.shape.x
        startY : U.shape.y
        endX : U.shape.x - const.axisSize
        endY : U.shape.y
        thickness : U.thickness
        color : U.axisColor
    }

    U.yAxisUp = Arrow {
        startX : U.shape.x
        startY : U.shape.y
        endX : U.shape.x
        endY : U.shape.y + const.axisSize
        thickness : U.thickness
        color : U.axisColor
    }

    U.yAxisDown = Arrow {
        startX : U.shape.x
        startY : U.shape.y
        endX : U.shape.x
        endY : U.shape.y - const.axisSize
        thickness : U.thickness
        color : U.axisColor
    }

    U.text = Text {
        string : U.label
        x : U.shape.x - const.axisSize
        y : U.shape.y + const.axisSize
        color : U.axisColor
    }

    -- U.xLabelLocation = ensure nearHead(U.xAxisRight, U.textX, 20.0, 0.0)
    -- U.yLabelLocation = ensure nearHead(U.yAxisUp, U.textY, 0.0, 20.0)
}

Vector v
with VectorSpace U
where In(v,U) {
   v.containFn = ensure contains(U.shape, v.shape)
   v.containLabel = ensure contains(U.shape, v.text)
   v.labelLocation = ensure nearHead(v.shape, v.text, 0.0 , 30.0)

  v.text = Text {
    string : v.label
    color : v.shape.color
  }

  v.shape = Arrow {
    startX : U.shape.x
    startY : U.shape.y
    thickness : 3.0
    color : Colors.blue
  }

   v.vector = (v.shape.endX - v.shape.startX, v.shape.endY - v.shape.startY)
   v.angle = angle(v.vector)

  v.layeringText1 = v.text above U.xAxisRight
  v.layeringText2 = v.text above U.xAxisLeft
  v.layeringText3 = v.text above U.yAxisUp
  v.layeringText4 = v.text above U.yAxisDown
}

Vector u; Vector v
with VectorSpace U
where Orthogonal(u, v); In(u, U); In(v, U) {
      -- TODO: fix this angle calculation so it works when both vectors are in quadrants 2 or 3
      LOCAL.angle = min(u.angle, v.angle)
      LOCAL.len = 20.0

      -- Scale by side len. Then translate so default square's corner is at (0,0).
      -- Then rotate by the vector angle. Then translate to the local origin of the vector space.
      LOCAL.shape = SquareTransform {
	  -- TODO: unintuitive behavior; need to set these constants otherwise shape is offscreen
	  x : 0.0
	  y : 0.0
	  side : 1.0
	  rotation : 0.0

	  transform : andThen(andThen(andThen(scale(LOCAL.len, LOCAL.len), translate(LOCAL.len / 2.0, LOCAL.len / 2.0)), rotate(LOCAL.angle)), translate(U.shape.x, U.shape.y))
	  color : Colors.white
	  strokeColor : Colors.black
	  strokeWidth : 0.1
      }

      -- LOCAL.perpFn = ensure equals(dot(u.vector, v.vector), 0.0)
      LOCAL.perpFn = encourage equal(dot(u.vector, v.vector), 0.0)

      LOCAL.layering1 = v.shape above LOCAL.shape
      LOCAL.layering2 = u.shape above LOCAL.shape
}

Vector `x2` {
       override `x2`.shape.color = Colors.green
}