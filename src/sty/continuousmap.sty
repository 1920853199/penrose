
Set x {
    x.shape = Circle {
        color = rgba(0.1, 0.1, 0.9, 0.2)
        stroke-style = "solid"
    }
    x.maxSize = ensure maxSize(x.shape)
    x.minSize = ensure minSize(x.shape)
    x.text    = Text { string = x.label }
    x.labelFn = ensure contains(x.shape, x.text)
}

Set `U` {
    override `U`.shape.stroke-style = "dashed"
    override `U`.shape.stroke-width = 2
    -- y = R1.shape.y
}

Set `V` {
    override `V`.shape.stroke-style = "dashed"
    override `V`.shape.stroke-width = 2
    -- y = U.shape.y
}

Set `R1` {
    override `R1`.shape = Square {
        color = rgba(0.95, 0.96, 0.92, 0.5)
    }
}

Set `R2`
with Set `R1`
{
    override `R2`.shape = Square {
        color = rgba(0.95, 0.96, 0.92, 0.5)
        y = `R1`.shape.y
        x = `R1`.shape.x + 400.0
        side  = `R1`.shape.side
    }
}


/*
IsSubset x y {
    -- constraint contains(y, x, 10)
    -- constraint outsideOf(y.shape.label, x)
    -- objective  repel(x.shape, y.shape)
}

Map f x y {
    shape = Arrow {
        start = x.shape
        end   = y.shape
        -- style = "curved"
        text = Auto
    }
    objective centerLabel(f, f.shape.label)
}

Set `R1` {
    shape = Box {
        color = srgba(0.95, 0.96, 0.92, 0.5)
        stroke = 2
    }
    objective topRightOf(R1.shape.label, R1.shape)
}

Set `R2` {
    shape = Box {
        color = srgba(0.95, 0.96, 0.92, 0.5)
        stroke = 2
        y = R1.shape.y
        x = add(R1.shape.x, 400)
        side  = R1.shape.side
    }
    objective topRightOf(R2.shape.label, R2.shape)
}

*/
