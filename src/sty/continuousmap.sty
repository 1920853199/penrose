
Set x {
    x.shape = Circle {
        color = rgba(0.1, 0.1, 0.9, 0.2)
        stroke-style = "solid"
    }
    x.text    = Text { string = x.label }
    x.labelFn = ensure contains(x.shape, x.text)
}

Set `U`
with Set `R1`
{
    override `U`.shape.stroke-style = "dashed"
    override `U`.shape.stroke-width = 2
    override `U`.shape.y = `R1`.shape.y
}

Set `V`
with Set `U` {
    override `V`.shape.stroke-style = "dashed"
    override `V`.shape.stroke-width = 2
    override `V`.shape.y = `U`.shape.y
}


Set `R1` {
    override `R1`.shape = Square {
        color = rgba(0.95, 0.96, 0.92, 0.5)
    }
    -- objective topRightOf(R1.shape.label, R1.shape)
}


Set x; Set y
where IsSubset(x, y) {
    y.containFn = ensure contains(y.shape, x.shape, 10.0)
    y.outsideFn = ensure outsideOf(y.text, x.shape)
}


Set `R2`
with Set `R1`
{
    override `R2`.shape = Square {
        color = rgba(0.95, 0.96, 0.92, 0.5)
        y = `R1`.shape.y
        x = `R1`.shape.x + 400.0
        side  = `R1`.shape.side
    }
    -- objective topRightOf(R2.shape.label, R2.shape)
}


Map f
where From(f, X, Y)
with Set X; Set Y
{
    f.shape = Arrow {
        thickness = 10.0
        -- style = "curved"
    }
    f.text     = Text { string = f.label }
    f.labelFn  = encourage centerLabel(f.shape, f.text)
    f.centerFn = encourage centerArrow(f.shape, X.shape, Y.shape)
}

/*

*/
