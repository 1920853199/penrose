Colors {
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)
    Colors.gray = rgba(0.8, 0.8, 0.8, 1.0)
    Colors.darkgray = rgba(0.6, 0.6, 0.6, 1.0)
    Colors.red = rgba(1.0, 0.0, 0.0, 1.0)
    Colors.yellow = rgba(1.0, 1.0, 0.0, 1.0)
    Colors.orange = rgba(1.0, 0.6, 0.0, 1.0)
    Colors.lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    Colors.cyan = rgba(0.0, 1.0, 1.0, 1.0)
    Colors.purple = rgba(0.5, 0.0, 0.5, 1.0)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
    Colors.lightblue2 = rgba(0.82, 0.88, 0.94, 1.0)
}

global {
       global.pi_over_four = 0.78
       global.half_pi = 1.57
       global.pi = 3.14
       global.two_pi = 6.28
}

Point p {
      p.shape = Circle {
      	      x = 0.0
	      y = 0.0
	      r = 5.0
	      color = Colors.red
	      strokeWidth = 0.0
      }
}

Set X {
    X.dx = OPTIMIZED
    X.dy = OPTIMIZED
    X.angle = OPTIMIZED

    X.shape = ParallelogramTransform {
    	x = X.dx -- 0.0
	y = X.dy -- 0.0
	width = 100.0
	height = 200.0
	innerAngle = global.pi_over_four
	rotation = X.angle -- 0.0

	-- transform = translate(X.dx, X.dy)
	color = setOpacity(Colors.blue, 0.5)
    }
}

Set `B` {
    override `B`.shape.color = setOpacity(Colors.green, 0.5)
    override `B`.shape.innerAngle = 3.14159 / 3.0
}

Set `A`; Set `B` {
   LOCAL.objFn = encourage boundaryIntersect(`A`.shape, `B`.shape)
   -- LOCAL.objFn = encourage containsPoly(`A`.shape, `B`.shape)
}
