plugin "ddgjs"

global {
    global.padding = 20.0
    global.stroke = 2.0
    global.spacing = 150.0

    global.selectedRadius = 5.0
    global.selectedThickness = 3.5

    global.selectedColor = Colors.red
    global.selectedColor2 = setOpacity(global.selectedColor, 0.25)

    global.starColor = Colors.midnightblue
    global.starColor2 = Colors.lightslategray

    global.closureColor = Colors.midnightblue
    global.closureColor2 = Colors.lightslategray

    global.linkColor = Colors.blue
    global.linkColor2 = setOpacity(global.linkColor, 0.25)

    global.boundaryColor = Colors.yellow
    global.boundaryColor2 = setOpacity(global.boundaryColor, 0.25)

    -- For conversion from math space to screen space
    -- TODO: compute these more automatically
    global.scaleFactor = 100.0
    -- global.offset = 150.0
}

Colors {
    -- Keenan palette
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)
    Colors.midnightblue = rgba(0.14, 0.16, 0.52, 1.0)
    Colors.lightslategray = rgba(0.50, 0.51, 0.69, 1.0)
    Colors.silver = rgba(0.71, 0.72, 0.79, 1.0)
    Colors.gainsboro = rgba(0.87, 0.87, 0.87, 1.0)

    Colors.darkgray = rgba(0.1, 0.1, 0.1, 1.0)
    Colors.gray = rgba(0.8, 0.8, 0.8, 1.0)
    Colors.red = rgba(1.0, 0.0, 0.0, 1.0)
    Colors.pink = rgba(1.0, 0.4, 0.7, 1.0)
    Colors.yellow = rgba(1.0, 1.0, 0.0, 1.0)
    Colors.orange = rgba(1.0, 0.6, 0.0, 1.0)
    Colors.lightorange = rgba(1.0, 0.6, 0.0, 0.25)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.sky = rgba(0.325, 0.718, 0.769, 1.0)
    Colors.lightsky = rgba(0.325, 0.718, 0.769, 0.25)
    Colors.lightblue = rgba(0.0, 0.0, 1.0, 0.25)
    Colors.cyan = rgba(0.0, 1.0, 1.0, 1.0)
    Colors.purple = rgba(0.5, 0.0, 0.5, 1.0)
    Colors.lightpurple = rgba(0.5, 0.0, 0.5, 0.25)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
    Colors.bluegreen = rgba(0.44, 0.68, 0.60, 1.0)
}


-- TODO: this is going to match Subcomplex too... how to fix that?
SComplex K {
       -- K.val = OPTIMIZED
       -- TODO: just so we have some variables optimized, otherwise genOptProblem complains

       K.x_offset = OPTIMIZED
       K.y_offset = OPTIMIZED
       K.size = 200.0

       K.shape = Rectangle {
       	       x = OPTIMIZED
	       y = OPTIMIZED
	       sizeX = K.size
	       sizeY = K.size
	       rotation = 0.0
	       color = Colors.gainsboro
	       strokeColor = Colors.black
	       strokeWidth = 4.0
       }

       K.padding = 25.0

       K.text = Text {
	 x = K.shape.x - K.shape.sizeX / 2.0 + K.padding
	 y = K.shape.y - K.shape.sizeY / 2.0 + K.padding
	 string = K.label
	 rotation = 0.0
	 color = Colors.black
       }

       K.labelFn = encourage centerLabel(K.shape, K.text)

       K.layerTextFn = K.text above K.shape
}

-- TODO: this generates a (K1, K2) and (K2, K1) match
SComplex K1; SComplex K2 {
	 LOCAL.padding = 30.0

	 -- TODO: improve this for rectangles by not just using the x size
	 LOCAL.overlapFn = ensure disjoint(K1.shape, K2.shape, LOCAL.padding)
	 LOCAL.alignFn = ensure sameHeight(K1.shape, K2.shape)
	 -- LOCAL.distFn = ensure distBetween(K1.shape, K2.shape, LOCAL.padding)
}

Vertex v 
where InVS(v, K)
with SComplex K {
       v.xpos = ddg[v.name]["x"] * global.scaleFactor
       v.ypos = ddg[v.name]["y"] * global.scaleFactor

       v.shape = Circle { 
         x = v.xpos -- avoid "x <- f(x)" in override
	 y = v.ypos
         r = 0.0
	 color = Colors.black
	 strokeWidth = 0.0
       }

       -- NOTE: by default, this starts with an empty string, so we only label user-declared vertices
       v.text = Text {
	 x = v.shape.x + global.padding
	 y = v.shape.y + global.padding
	 string = ""
	 rotation = 0.0
	 color = v.shape.color
       }

       v.layerFnShape = v.shape above K.shape
       v.layerFnText = v.text above K.shape
       -- v.posFn = ensure onCanvas(v.shape)
       -- v.posFn = encourage center(v.shape)
}

-- Label a distinguished vertex
Vertex v
where DeclaredV(v); InVS(v, K)
with SComplex K {
      -- Optimize the label position, only for the distinguished vertex
      override v.text.string = v.label
      override v.text.x = OPTIMIZED
      override v.text.y = OPTIMIZED

      v.offset = 30.0
      -- This is trying to place the labels but it's very slow, goes from 40s to 3min
      v.labelCloseFn = encourage near(v.text, v.shape, v.offset)
      v.labelInComplexFn = ensure contains(K.shape, v.text)
      -- Label's color might need to be programmatically set depending on its location
}

Vertex v; Edge e
where DeclaredV(v); InVS(v, K); InES(e, K)
with SComplex K {
     LOCAL.offset = 5.0
     -- Make sure the label doesn't overlap with any edge
     -- TODO: this is NaNing
     LOCAL.edgeLabelFn = ensure disjoint(v.text, e.shape, LOCAL.offset)
}

Edge e
where e := MkEdge(v1, v2); InES(e, K)
with Vertex v1; Vertex v2; SComplex K {
     e.shape = Line { 
     	     startX = v1.shape.x
     	     startY = v1.shape.y
     	     endX = v2.shape.x
     	     endY = v2.shape.y
	     color = Colors.black
	     thickness = 2.5
     }

     -- e.text = Text {
     --   x = midpointX(e.shape) + global.padding
     --   y = midpointY(e.shape) + global.padding
     --   string = e.label
     --   rotation = 0.0
     -- }

     e.layering1 = v1.shape above e.shape
     e.layering2 = v2.shape above e.shape
     e.layering3 = e.shape above K.shape
}

Face f -- 255,552 substitutions...
where f := MkFace(e1, e2, e3); InFS(f, K)
with Edge e1; Edge e2; Edge e3; SComplex K {
     f.color = Colors.lightsky

     f.shape = Curve { 
     	     pathData = triangle(e1.shape, e2.shape, e3.shape)
	     strokeWidth = 0.0
	     fill = Colors.silver
	     color = Colors.silver
	     rotation = 0.0
     }

     -- f.text = Text {
     --   string = f.label
     --   color = f.color
     --   rotation = 0.0
     -- }
     f.layeringShape = f.shape above K.shape
}

-- Relative layerings within a simplicial complex
Vertex v; Edge e; Face f
where InVS(v, K); InES(e, K); InFS(f, K)
with SComplex K {
      LOCAL.textLayering1 = v.text above f.shape
      LOCAL.textLayering2 = v.text above e.shape
}

------------------ Things in a closure

Vertex v
where InVS(v, C); C := Closure(S)
with Subcomplex C; SSubset S {
     override v.shape.r = global.selectedRadius
      override v.shape.color = global.closureColor
}

Edge e
where InES(e, C); C := Closure(S)
with Subcomplex C; SSubset S {
      override e.shape.thickness = global.selectedThickness
      override e.shape.color = global.closureColor
}

Face f
where InFS(f, C); C := Closure(S)
with Subcomplex C; SSubset S {
      override f.shape.fill = global.closureColor2
      override f.shape.color = global.closureColor2
}

------------------ Things in a subset that result from a star

Vertex v
where InVS(v, S); S := StarV(v); IsSubsetOf(S, K)
with SSubset S; SComplex K {
     override v.shape.r = global.selectedRadius
      override v.shape.color = global.starColor
}

Edge e
where InES(e, S); S := StarV(v); IsSubsetOf(S, K)
with SSubset S; SComplex K; Vertex v {
      override e.shape.thickness = global.selectedThickness
      override e.shape.color = global.starColor
}

Face f
where InFS(f, S); S := StarV(v); IsSubsetOf(S, K)
with SSubset S; SComplex K; Vertex v {
      override f.shape.fill = global.starColor2
      override f.shape.color = global.starColor2
}

------------------ Things in a link of a subset

Vertex v
where InVS(v, S2); S2 := Link(S1)
with SSubset S2; SSubset S1 {
     override v.shape.r = global.selectedRadius
      override v.shape.color = global.linkColor
}

Edge e
where InES(e, S2); S2 := Link(S1)
with SSubset S2; SSubset S1 {
      override e.shape.thickness = global.selectedThickness
      override e.shape.color = global.linkColor
}

Face f
where InFS(f, S2); S2 := Link(S1)
with SSubset S2; SSubset S1 {
      override f.shape.fill = global.linkColor2
      override f.shape.color = global.linkColor2
}

------------------ Things in a link of a vertex

Vertex v
where InVS(v, S); S := LinkV(w)
with SSubset S; Vertex w {
     override v.shape.r = global.selectedRadius
      override v.shape.color = global.linkColor
}

Edge e
where InES(e, S); S := LinkV(w)
with SSubset S; Vertex w {
      override e.shape.thickness = global.selectedThickness
      override e.shape.color = global.linkColor
}

Face f
where InFS(f, S); S := LinkV(w)
with SSubset S; Vertex w {
      override f.shape.fill = global.linkColor2
      override f.shape.color = global.linkColor2
}

------------------ Things in boundary of a subcomplex

Vertex v
where InVS(v, S); S := Boundary(C)
with SSubset S; SComplex C {
     override v.shape.r = global.selectedRadius
      override v.shape.color = global.boundaryColor
}

Edge e
where InES(e, S); S := Boundary(C)
with SSubset S; SComplex C {
      override e.shape.thickness = global.selectedThickness
      override e.shape.color = global.boundaryColor
}

Face f
where InFS(f, S); S := Boundary(C)
with SSubset S; SComplex C {
      override f.shape.fill = global.boundaryColor2
      override f.shape.color = global.boundaryColor2
}

-------------------

-- Try to position the vertices to be inside the bbox
-- Should this go in the vertex selector?
Vertex v
where InVS(v, K)
with SComplex K {
     override v.shape.x = v.xpos + K.x_offset
     override v.shape.y = v.ypos + K.y_offset

     v.inSCFn = ensure contains(v.shape, K.shape)
}

-- Label the closure of a star

Subcomplex C
where C := Closure(S); IsSubsetOf(S, K); S := StarV(v)
with SSubset S; SComplex K; Vertex v {

       C.text = Text {
	 x = OPTIMIZED
	 y = OPTIMIZED
	 string = C.label
	 rotation = 0.0
	 color = global.closureColor
       }

       -- TODO: this actually prefers the center of the shape but it shouldn't
       C.labelFn = ensure contains(K.shape, C.text)
       C.layerFn = C.text above K.shape

       -- TODO
       -- Does not overlap any other shape (maybe just disjoint with edges?)
       -- Close to the V/E/F of the Subcomplex in question
}
